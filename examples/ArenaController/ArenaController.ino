//.$file${.::ArenaController.ino} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${.::ArenaController.ino}
//
// This code has been generated by QM 5.1.3 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${.::ArenaController.ino} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"   // QP-C++ framework
#include "arena_controller.hpp"  // ArenaController application interface
#include "bsp.hpp"     // Board Support Package (BSP)

using namespace QP;

//............................................................................
void setup() {
    QF::init(); // initialize the framework
    BSP::init(); // initialize the BSP

    // statically allocate event queues for the AOs and start them...
    static QEvt const *arena_controller_queueSto[10];
    AO_ArenaController->start(1U, // priority
                     arena_controller_queueSto, Q_DIM(arena_controller_queueSto),
                     (void *)0, 0U); // no stack
    //...
}

//............................................................................
void loop() {
    QF::run(); // run the QF/C++ framework
}

//============================================================================
// generate declarations and definitions of all AO classes (state machines)...
//.$declare${AOs::ArenaController} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//.${AOs::ArenaController} ...................................................
class ArenaController : public QP::QActive {
private:
    QP::QTimeEvt command_time_evt_;

public:
    static ArenaController instance;

private:
    QP::QTimeEvt frame_time_evt_;

public:
    ArenaController();

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(ArenaOn);
    Q_STATE_DECL(DisplayOn);
    Q_STATE_DECL(AllOn);
    Q_STATE_DECL(WaitingToDisplayFrame);
    Q_STATE_DECL(DisplayOff);
};
//.$enddecl${AOs::ArenaController} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${AOs::ArenaController} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//.${AOs::ArenaController} ...................................................
ArenaController ArenaController::instance;
//.${AOs::ArenaController::ArenaController} ..................................
ArenaController::ArenaController()
: QActive(Q_STATE_CAST(&ArenaController::initial)),
    command_time_evt_(this, COMMAND_TIMEOUT_SIG, 0U),
QActive(Q_STATE_CAST(&ArenaController::initial)),
    frame_time_evt_(this, FRAME_TIMEOUT_SIG, 0U)
{}

//.${AOs::ArenaController::SM} ...............................................
Q_STATE_DEF(ArenaController, initial) {
    //.${AOs::ArenaController::SM::initial}
    return tran(&DisplayOff);
}
//.${AOs::ArenaController::SM::ArenaOn} ......................................
Q_STATE_DEF(ArenaController, ArenaOn) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::ArenaController::SM::ArenaOn::RESET}
        case RESET_SIG: {
            status_ = tran(&ArenaOn);
            break;
        }
        //.${AOs::ArenaController::SM::ArenaOn::COMMAND_TIMEOUT}
        case COMMAND_TIMEOUT_SIG: {
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${AOs::ArenaController::SM::ArenaOn::DisplayOn} ...........................
Q_STATE_DEF(ArenaController, DisplayOn) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = super(&ArenaOn);
            break;
        }
    }
    return status_;
}
//.${AOs::ArenaController::SM::ArenaOn::DisplayOn::AllOn} ....................
Q_STATE_DEF(ArenaController, AllOn) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = super(&DisplayOn);
            break;
        }
    }
    return status_;
}
//.${AOs::ArenaController::SM::ArenaOn::DisplayOn::AllOn::WaitingToDisplayFrame} 
Q_STATE_DEF(ArenaController, WaitingToDisplayFrame) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = super(&AllOn);
            break;
        }
    }
    return status_;
}
//.${AOs::ArenaController::SM::ArenaOn::DisplayOff} ..........................
Q_STATE_DEF(ArenaController, DisplayOff) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = super(&ArenaOn);
            break;
        }
    }
    return status_;
}
//.$enddef${AOs::ArenaController} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//...

//============================================================================
// generate definitions of all AO opaque pointers...
//.$define${AOs::AO_ArenaController} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//.${AOs::AO_ArenaController} ................................................
QP::QActive * const AO_ArenaController;
//.$enddef${AOs::AO_ArenaController} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//...
