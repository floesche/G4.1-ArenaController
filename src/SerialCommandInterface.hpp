//.$file${.::SerialCommandInterface.hpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${.::SerialCommandInterface.hpp}
//
// This code has been generated by QM 5.1.3 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${.::SerialCommandInterface.hpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef SERIAL_COMMAND_INTERFACE_HPP
#define SERIAL_COMMAND_INTERFACE_HPP

#include "ArenaController.hpp"


//============================================================================
// generate declaration of the active object
//.$declare${AOs::SerialCommandInterface} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${AOs::SerialCommandInterface} ............................................
class SerialCommandInterface : public QP::QActive {
public:
    QP::QTimeEvt serial_time_evt_;
    static SerialCommandInterface instance;
    std::uint8_t first_command_byte_;
    char string_command_[constants::string_command_length_max];
    char string_response_[constants::string_response_length_max];

public:
    SerialCommandInterface();

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(Active);
    Q_STATE_DECL(NotReady);
    Q_STATE_DECL(PollingForNewCommand);
    Q_STATE_DECL(Waiting);
    Q_STATE_DECL(ProcessingBinaryCommand);
    Q_STATE_DECL(ProcessingStringCommand);
    Q_STATE_DECL(Inactive);
};

} // namespace AC
//.$enddecl${AOs::SerialCommandInterface} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif