<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.3" links="0">
 <documentation>This is a little more advanced ArenaController example for the Arduino DUE board. The example demonstrates:

1. One active object class &quot;ArenaController&quot; (inside the package &quot;AOs&quot;)
2. A simple state machine
3. The Board Support Package (BSP), see below.

----
# Board configuration:

The external LED needs to be connected between the pins GND and 13, with the short LEG leg at the GND pin.

----
# More info

This example demonstrates the concept of the Board Support Package (BSP), which separates the &quot;What&quot; needs to be done from &quot;How&quot; this is done. The BSP consists of two files &quot;bsp.h&quot; and &quot;bsp.cpp&quot;. The application (active objects) need to include only the &quot;bsp.h&quot; header file and the state machines call only the BSP functions, but don't interact with the hardware directly.

This structure of the code is recommended for applications with only one active object. (See also the dpp_bsp example).</documentation>
 <framework name="qpcpp"/>
 <package name="AOs" stereotype="0x02" namespace="AC::">
  <class name="Arena" superclass="qpcpp::QActive">
   <attribute name="instance" type="Arena" visibility="0x00" properties="0x01">
    <documentation>static class instance (Singleton)</documentation>
   </attribute>
   <operation name="Arena" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Arena::initial))</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1">
     <action>BSP::initializeArena();
subscribe(RESET_SIG);
subscribe(ALL_ON_SIG);
subscribe(ALL_OFF_SIG);</action>
     <initial_glyph conn="49,10,4,0,4">
      <action box="-1,-1,10,2"/>
     </initial_glyph>
    </initial>
    <state name="ArenaOn">
     <entry brief="activateCommandInterfaces()">BSP::activateCommandInterfaces();</entry>
     <exit brief="deactivateCommandInterfaces()">BSP::deactivateCommandInterfaces();</exit>
     <initial target="../4">
      <initial_glyph conn="60,20,4,0,3">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="ALL_OFF" target="../4">
      <tran_glyph conn="31,26,3,3,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RESET" target="../4">
      <tran_glyph conn="31,31,3,2,13,-3">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="AllOn">
      <entry brief="displayAllOnFrames()">static AC::DisplayFramesEvt displayFramesEvt = { AC::DISPLAY_FRAMES_SIG, 0U, 0U};
displayFramesEvt.panel_buffer = &amp;AC::constants::all_on_grayscale_pattern;
displayFramesEvt.panel_buffer_byte_count = AC::constants::byte_count_per_panel_grayscale;
QF::PUBLISH(&amp;displayFramesEvt, this);</entry>
      <state_glyph node="42,34,35,7">
       <entry box="1,2,20,2"/>
      </state_glyph>
     </state>
     <state name="AllOff">
      <entry brief="deactivateDisplay()">static QEvt const deactivateDisplayEvt = { AC::DEACTIVATE_DISPLAY_SIG, 0U, 0U};
QF::PUBLISH(&amp;deactivateDisplayEvt, this);</entry>
      <tran trig="ALL_ON" target="../../3">
       <tran_glyph conn="54,28,2,0,6">
        <action box="2,1,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="42,23,25,5">
       <entry box="1,2,17,2"/>
      </state_glyph>
     </state>
     <state_glyph node="31,14,67,56">
      <entry box="1,2,23,2"/>
      <exit box="1,4,24,2"/>
     </state_glyph>
    </state>
    <state_diagram size="107,77"/>
   </statechart>
  </class>
  <class name="SerialCommandInterface" superclass="qpcpp::QActive">
   <attribute name="serial_time_evt_" type="QP::QTimeEvt" visibility="0x00" properties="0x00"/>
   <attribute name="instance" type="SerialCommandInterface" visibility="0x00" properties="0x01"/>
   <attribute name="first_command_byte_" type="std::uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="string_command_" type="String" visibility="0x00" properties="0x00"/>
   <attribute name="string_response_" type="String" visibility="0x00" properties="0x00"/>
   <operation name="SerialCommandInterface" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;SerialCommandInterface::initial)),
    serial_time_evt_(this, SERIAL_TIMEOUT_SIG, 0U)</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../2">
     <action>subscribe(SERIAL_COMMAND_AVAILABLE_SIG);
subscribe(ETHERNET_COMMAND_AVAILABLE_SIG);
subscribe(COMMAND_PROCESSED_SIG);</action>
     <initial_glyph conn="46,8,4,0,3">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Active">
     <entry brief="armSerialTimer(50Hz)">serial_time_evt_.armX(BSP::TICKS_PER_SEC/2, BSP::TICKS_PER_SEC/50);</entry>
     <exit brief="disarmSerialTimer()">serial_time_evt_.disarm();</exit>
     <initial target="../3">
      <initial_glyph conn="36,28,4,0,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="DEACTIVATE_SERIAL_COMMAND_INTERFACE" target="../../2">
      <tran_glyph conn="3,27,3,3,-2,-14,36">
       <action box="-1,-16,35,2"/>
      </tran_glyph>
     </tran>
     <tran trig="SERIAL_TIMEOUT">
      <tran_glyph conn="3,32,3,-1,16">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <state name="NotReady">
      <entry brief="beginSerial()">BSP::beginSerial();</entry>
      <tran trig="SERIAL_READY" target="../../4">
       <tran_glyph conn="51,34,1,1,16,11,-3">
        <action box="2,-3,13,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="29,32,22,8">
       <entry box="1,2,13,2"/>
      </state_glyph>
     </state>
     <state name="PollingForNewCommand">
      <tran trig="SERIAL_TIMEOUT">
       <action brief="pollSerialCommand()">BSP::pollSerialCommand();</action>
       <tran_glyph conn="33,53,3,-1,16">
        <action box="0,-2,24,4"/>
       </tran_glyph>
      </tran>
      <tran trig="ETHERNET_COMMAND_AVAILABLE" target="../../5">
       <tran_glyph conn="64,52,1,3,28">
        <action box="1,-2,32,3"/>
       </tran_glyph>
      </tran>
      <tran trig="SERIAL_COMMAND_AVAILABLE">
       <action brief="readFirstCommandByte()">first_command_byte_ = BSP::readSerialByte();</action>
       <choice target="../../../6">
        <guard brief="binary_command">(first_command_byte_ &lt;= constants::first_command_byte_max_value_binary)</guard>
        <action brief="readSerialBinaryCommand()"/>
        <choice_glyph conn="36,63,5,3,30,9,9">
         <action box="25,10,22,4"/>
        </choice_glyph>
       </choice>
       <choice target="../../../7">
        <guard brief="else"/>
        <action brief="readSerialStringCommand()">string_command_ = BSP::readSerialStringCommand(first_command_byte_);</action>
        <choice_glyph conn="36,63,5,1,-2,8,-2">
         <action box="-3,9,22,4"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="36,57,2,-1,6">
        <action box="1,1,26,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="33,43,31,14"/>
     </state>
     <state name="Waiting">
      <tran trig="COMMAND_PROCESSED" target="../../4">
       <tran_glyph conn="92,48,3,1,-28">
        <action box="-22,-2,21,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="92,44,16,10"/>
     </state>
     <state name="ProcessingBinaryCommand">
      <tran trig="COMMAND_PROCESSED" target="../../4">
       <action brief="writeSerialBinaryResponse()">//BSP::writeSerialBinaryResponse();</action>
       <tran_glyph conn="84,64,0,1,-8,-20">
        <action box="1,-7,21,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="75,64,26,10"/>
     </state>
     <state name="ProcessingStringCommand">
      <entry brief="processStringCommand()">string_response_ = BSP::processStringCommand(string_command_);</entry>
      <tran trig="COMMAND_PROCESSED" target="../../4">
       <action brief="writeSerialStringResponse()">BSP::writeSerialStringResponse(string_response_);</action>
       <tran_glyph conn="19,64,0,3,-15,14">
        <action box="-10,-20,20,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="7,64,25,13">
       <entry box="1,2,21,2"/>
      </state_glyph>
     </state>
     <state_glyph node="3,21,106,59">
      <entry box="1,2,21,2"/>
      <exit box="1,4,21,2"/>
     </state_glyph>
    </state>
    <state name="Inactive">
     <tran trig="ACTIVATE_SERIAL_COMMAND_INTERFACE" target="../../1">
      <tran_glyph conn="55,13,1,1,56,12,-2">
       <action box="2,-2,35,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="37,11,18,7"/>
    </state>
    <state_diagram size="112,81"/>
   </statechart>
  </class>
  <class name="Display" superclass="qpcpp::QActive">
   <attribute name="instance" type="Display" visibility="0x00" properties="0x01"/>
   <attribute name="(*panel_buffer_)[]" type="std::uint8_t const" visibility="0x02" properties="0x00"/>
   <attribute name="display_frequency_hz_" type="std::uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="panel_buffer_byte_count_" type="std::uint8_t" visibility="0x02" properties="0x00"/>
   <operation name="Display" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Display::initial))</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1">
     <action>BSP::initializeDisplay();
subscribe(DEACTIVATE_DISPLAY_SIG);
subscribe(DISPLAY_FRAMES_SIG);
subscribe(DISPLAY_FRAME_TIMEOUT_SIG);
subscribe(FRAME_TRANSFERRED_SIG);
display_frequency_hz_ = constants::display_frequency_hz_default;</action>
     <initial_glyph conn="39,2,4,0,3">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Initialized">
     <initial target="../2">
      <initial_glyph conn="41,10,4,0,3">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="SET_DISPLAY_FREQUENCY">
      <action>display_frequency_hz_ = Q_EVT_CAST(SetDisplayFrequencyEvt)-&gt;display_frequency_hz;</action>
      <tran_glyph conn="2,10,3,-1,24">
       <action box="0,-2,22,2"/>
      </tran_glyph>
     </tran>
     <state name="Inactive">
      <tran trig="DISPLAY_FRAMES" target="../../3/1">
       <action>panel_buffer_ = Q_EVT_CAST(DisplayFramesEvt)-&gt;panel_buffer;
panel_buffer_byte_count_ = Q_EVT_CAST(DisplayFramesEvt)-&gt;panel_buffer_byte_count;</action>
       <tran_glyph conn="41,20,2,0,10">
        <action box="1,1,34,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="35,13,12,7"/>
     </state>
     <state name="Active">
      <tran trig="DEACTIVATE_DISPLAY" target="../../2">
       <tran_glyph conn="7,29,3,3,-2,-14,30">
        <action box="5,-16,18,3"/>
       </tran_glyph>
      </tran>
      <state name="DisplayingFrames">
       <entry brief="armDisplayFrameTimer()">BSP::armDisplayFrameTimer(display_frequency_hz_);</entry>
       <exit brief="disarmDisplayFrameTimer()">BSP::disarmDisplayFrameTimer();</exit>
       <initial target="../2">
        <initial_glyph conn="42,37,4,0,3">
         <action box="0,-2,10,2"/>
        </initial_glyph>
       </initial>
       <tran trig="SET_DISPLAY_FREQUENCY" target="..">
        <action>display_frequency_hz_ = Q_EVT_CAST(SetDisplayFrequencyEvt)-&gt;display_frequency_hz;</action>
        <tran_glyph conn="75,49,1,1,2,-12,-2">
         <action box="-22,-13,29,2"/>
        </tran_glyph>
       </tran>
       <state name="WaitingToDisplayFrame">
        <tran trig="DISPLAY_FRAME_TIMEOUT" target="../../3">
         <tran_glyph conn="42,47,2,3,4">
          <action box="1,1,22,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="33,40,20,7"/>
       </state>
       <state name="DisplayingFrame">
        <entry brief="transferFrame()">static AC::TransferFrameEvt transferFrameEvt = { AC::TRANSFER_FRAME_SIG, 0U, 0U};
transferFrameEvt.panel_buffer = panel_buffer_;
transferFrameEvt.panel_buffer_byte_count = panel_buffer_byte_count_;
transferFrameEvt.region_row_panel_count = BSP::getRegionRowPanelCountMax();
transferFrameEvt.region_col_panel_count = BSP::getRegionColPanelCountMax();
QF::PUBLISH(&amp;transferFrameEvt, this);</entry>
        <tran trig="FRAME_TRANSFERRED" target="../../2">
         <tran_glyph conn="35,54,3,1,-4,-10,2">
          <action box="-19,1,18,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="35,51,17,6">
         <entry box="1,2,13,2"/>
        </state_glyph>
       </state>
       <state_glyph node="10,30,65,29">
        <entry box="1,2,25,2"/>
        <exit box="1,4,23,2"/>
       </state_glyph>
      </state>
      <state_glyph node="7,25,78,41"/>
     </state>
     <state_glyph node="2,5,94,71"/>
    </state>
    <state_diagram size="98,82"/>
   </statechart>
  </class>
  <class name="EthernetCommandInterface" superclass="qpcpp::QActive">
   <attribute name="instance" type="EthernetCommandInterface" visibility="0x00" properties="0x01"/>
   <attribute name="ethernet_time_evt_" type="QP::QTimeEvt" visibility="0x00" properties="0x00"/>
   <operation name="EthernetCommandInterface" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;EthernetCommandInterface::initial)),
    ethernet_time_evt_(this, ETHERNET_TIMEOUT_SIG, 0U)</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1">
     <action>subscribe(SERIAL_COMMAND_AVAILABLE_SIG);
subscribe(ETHERNET_COMMAND_AVAILABLE_SIG);
subscribe(COMMAND_PROCESSED_SIG);</action>
     <initial_glyph conn="55,1,4,0,2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Inactive">
     <tran trig="ACTIVATE_ETHERNET_COMMAND_INTERFACE" target="../../2">
      <tran_glyph conn="63,5,1,1,52,18,-7">
       <action box="1,-2,36,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="49,3,14,9"/>
    </state>
    <state name="Active">
     <entry brief="armEthernetTimer(50Hz)">ethernet_time_evt_.armX(BSP::TICKS_PER_SEC/2, BSP::TICKS_PER_SEC/50);</entry>
     <exit brief="disarmEthernetTimer()">ethernet_time_evt_.disarm();</exit>
     <initial target="../3">
      <initial_glyph conn="12,29,5,3,3">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="DEACTIVATE_ETHERNET_COMMAND_INTERFACE" target="../../1">
      <tran_glyph conn="9,23,3,3,-5,-18,45">
       <action box="0,-20,39,2"/>
      </tran_glyph>
     </tran>
     <tran trig="ETHERNET_TIMEOUT">
      <tran_glyph conn="9,22,3,-1,23">
       <action box="0,-2,17,3"/>
      </tran_glyph>
     </tran>
     <state name="Unintitalized">
      <tran trig="ETHERNET_INITIALIZED" target="../../6">
       <tran_glyph conn="43,29,1,3,13">
        <action box="-3,-7,19,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ETHERNET_TIMEOUT">
       <action brief="beginEthernet()">BSP::beginEthernet();</action>
       <tran_glyph conn="15,32,3,-1,18">
        <action box="0,-2,18,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="15,25,28,10"/>
     </state>
     <state name="IPAddressFound">
      <tran trig="ETHERNET_SERVER_INITIALIZED" target="../../5">
       <tran_glyph conn="38,42,1,0,4,8">
        <action box="5,2,27,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ETHERNET_TIMEOUT">
       <action brief="beginEthernetServer()">BSP::beginEthernetServer();</action>
       <tran_glyph conn="15,44,3,-1,18">
        <action box="0,-2,18,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="15,37,23,11"/>
     </state>
     <state name="PollingForNewCommand">
      <tran trig="ETHERNET_TIMEOUT">
       <action brief="pollEthernetCommand()">BSP::pollEthernetCommand();</action>
       <tran_glyph conn="15,57,3,-1,20">
        <action box="0,-2,21,5"/>
       </tran_glyph>
      </tran>
      <tran trig="SERIAL_COMMAND_AVAILABLE" target="../../7">
       <tran_glyph conn="44,59,1,3,36">
        <action box="3,-2,32,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ETHERNET_COMMAND_AVAILABLE" target="../../8">
       <tran_glyph conn="18,62,2,3,14,33">
        <action box="4,14,29,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="15,50,29,12"/>
     </state>
     <state name="WaitingForIPAddress">
      <tran trig="ETHERNET_TIMEOUT">
       <action brief="checkForIPAddress()">BSP::checkForEthernetIPAddress();</action>
       <tran_glyph conn="56,32,3,-1,18">
        <action box="0,-2,17,4"/>
       </tran_glyph>
      </tran>
      <tran trig="ETHERNET_IP_ADDRESS_FOUND" target="../../4">
       <tran_glyph conn="81,29,1,1,13,10,-56">
        <action box="0,-2,28,3"/>
       </tran_glyph>
      </tran>
      <state_glyph node="56,25,25,10"/>
     </state>
     <state name="Waiting">
      <tran trig="COMMAND_PROCESSED" target="../../5">
       <tran_glyph conn="80,54,3,1,-36">
        <action box="-29,-2,21,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="80,50,18,12"/>
     </state>
     <state name="ProcessingCommand">
      <tran trig="COMMAND_PROCESSED" target="../../5">
       <tran_glyph conn="51,72,3,2,-28,-10">
        <action box="-27,-2,21,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="51,68,25,10"/>
     </state>
     <state_glyph node="9,14,99,71">
      <entry box="1,2,24,2"/>
      <exit box="1,4,24,2"/>
     </state_glyph>
    </state>
    <state_diagram size="124,91"/>
   </statechart>
  </class>
  <class name="Frame" superclass="qpcpp::QActive">
   <attribute name="instance" type="Frame" visibility="0x00" properties="0x01">
    <documentation>static class instance (Singleton)</documentation>
   </attribute>
   <attribute name="panel_set_row_index_" type="std::uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="panel_set_col_index_" type="std::uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="(*panel_buffer_)[]" type="std::uint8_t const" visibility="0x02" properties="0x00"/>
   <attribute name="region_row_panel_count_" type="std::uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="region_col_panel_count_" type="std::uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="panel_buffer_byte_count_" type="std::uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="regions_[constants::region_count_per_frame_max]" type="QP::QHsm *" visibility="0x02" properties="0x00"/>
   <operation name="Frame" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Frame::initial))</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1">
     <action>BSP::initializeFrame();
subscribe(TRANSFER_FRAME_SIG);
subscribe(PANEL_SET_TRANSFERRED_SIG);
subscribe(FRAME_TRANSFERRED_SIG);</action>
     <initial_glyph conn="37,4,4,0,4">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Inactive">
     <tran trig="TRANSFER_FRAME" target="../../2/0">
      <action>panel_buffer_ = Q_EVT_CAST(TransferFrameEvt)-&gt;panel_buffer;
panel_buffer_byte_count_ = Q_EVT_CAST(TransferFrameEvt)-&gt;panel_buffer_byte_count;
region_row_panel_count_ = Q_EVT_CAST(TransferFrameEvt)-&gt;region_row_panel_count;
region_col_panel_count_ = Q_EVT_CAST(TransferFrameEvt)-&gt;region_col_panel_count;</action>
      <tran_glyph conn="36,17,2,0,10">
       <action box="0,1,32,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="28,8,16,9"/>
    </state>
    <state name="Active">
     <entry brief="resetIndicies();">panel_set_row_index_ = 0;
panel_set_col_index_ = 0;</entry>
     <state name="TransferringFrame">
      <initial target="../2">
       <initial_glyph conn="40,31,4,0,3">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <tran trig="FRAME_TRANSFERRED" target="../../../1">
       <tran_glyph conn="81,34,1,1,8,-21,-45">
        <action box="-25,-24,20,2"/>
       </tran_glyph>
      </tran>
      <state name="TransferringPanelSet">
       <entry brief="enablePanelSetSelectPin(); transferPanelSet()">BSP::enablePanelSetSelectPin(panel_set_row_index_, panel_set_col_index_);
BSP::transferPanelSet(panel_buffer_, panel_buffer_byte_count_);</entry>
       <exit brief="disablePanelSetSelectPin(); updatePanelSetSelectIndicies()">BSP::disablePanelSetSelectPin(panel_set_row_index_, panel_set_col_index_);
++panel_set_row_index_;
if (panel_set_row_index_ == region_row_panel_count_)
{
    panel_set_row_index_ = 0;
    ++panel_set_col_index_;
}
if (panel_set_col_index_ == region_col_panel_count_)
{
    panel_set_col_index_ = 0;
}</exit>
       <tran trig="PANEL_SET_TRANSFERRED">
        <choice target="../..">
         <guard brief="frameNotTransferred()">(panel_set_row_index_ != (region_row_panel_count_-1)) || (panel_set_col_index_ != (region_col_panel_count_-1))</guard>
         <choice_glyph conn="43,55,5,2,6,-5">
          <action box="1,0,26,2"/>
         </choice_glyph>
        </choice>
        <choice>
         <guard brief="else"/>
         <action brief="publishFrameTransferred()">static QEvt const frameTransferredEvt = { AC::FRAME_TRANSFERRED_SIG, 0U, 0U};
QF::PUBLISH(&amp;frameTransferredEvt, this);</action>
         <choice_glyph conn="43,55,4,-1,4,5">
          <action box="6,3,18,6"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="38,50,2,-1,5,5">
         <action box="-23,2,22,5"/>
        </tran_glyph>
       </tran>
       <state_glyph node="22,34,50,16">
        <entry box="1,2,49,2"/>
        <exit box="1,4,48,2"/>
       </state_glyph>
      </state>
      <state_glyph node="10,27,71,38"/>
     </state>
     <state_glyph node="7,21,80,49">
      <entry box="1,2,25,2"/>
     </state_glyph>
    </state>
    <state_diagram size="96,73"/>
   </statechart>
  </class>
  <class name="Watchdog" superclass="qpcpp::QActive">
   <attribute name="instance" type="Watchdog" visibility="0x00" properties="0x01"/>
   <attribute name="watchdog_time_evt_" type="QP::QTimeEvt" visibility="0x00" properties="0x00"/>
   <operation name="Watchdog" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Watchdog::initial)),
    watchdog_time_evt_(this, WATCHDOG_TIMEOUT_SIG, 0U)</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1">
     <action>subscribe(RESET_SIG);
BSP::initializeWatchdog();</action>
     <initial_glyph conn="23,4,4,0,4">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Feeding">
     <entry brief="armWatchdogTimer(1Hz)">watchdog_time_evt_.armX(BSP::TICKS_PER_SEC, BSP::TICKS_PER_SEC);</entry>
     <exit brief="disarmWatchdogTimer()">watchdog_time_evt_.disarm();</exit>
     <initial target="../2">
      <initial_glyph conn="49,22,5,1,-4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="RESET" target="../../2">
      <tran_glyph conn="24,30,2,0,7">
       <action box="1,2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="Initialized">
      <tran trig="WATCHDOG_TIMEOUT">
       <action brief="feedWatchdog()">BSP::feedWatchdog();</action>
       <tran_glyph conn="17,22,3,-1,22">
        <action box="0,-2,23,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="17,18,28,7"/>
     </state>
     <state_glyph node="14,8,45,22">
      <entry box="1,2,23,2"/>
      <exit box="1,4,23,2"/>
     </state_glyph>
    </state>
    <state name="Resetting">
     <state_glyph node="14,37,28,13"/>
    </state>
    <state_diagram size="80,70"/>
   </statechart>
  </class>
  <class name="Region" superclass="qpcpp::QHsm">
   <attribute name="instances[constants::region_count_per_frame_max]" type="Region" visibility="0x00" properties="0x01">
    <documentation>static instances (Singletons)</documentation>
   </attribute>
   <attribute name="spi_ptr_" type="SPIClass *" visibility="0x02" properties="0x00"/>
   <operation name="Region" type="" visibility="0x00" properties="0x02">
    <code>  : QHsm(&amp;initial)</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1">
     <initial_glyph conn="36,10,4,0,5">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="state1">
     <state_glyph node="24,15,25,15"/>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
 </package>
 <package name="Shared" stereotype="0x00" namespace="AC::">
  <class name="CommandEvt" superclass="qpcpp::QEvt"/>
  <class name="DisplayFramesEvt" superclass="qpcpp::QEvt">
   <attribute name="(*panel_buffer)[]" type="std::uint8_t const" visibility="0x00" properties="0x00"/>
   <attribute name="panel_buffer_byte_count" type="std::uint8_t" visibility="0x00" properties="0x00"/>
  </class>
  <class name="TransferFrameEvt" superclass="qpcpp::QEvt">
   <attribute name="(*panel_buffer)[]" type="std::uint8_t const" visibility="0x00" properties="0x00"/>
   <attribute name="panel_buffer_byte_count" type="std::uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="region_row_panel_count" type="std::uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="region_col_panel_count" type="std::uint8_t" visibility="0x00" properties="0x00"/>
  </class>
  <class name="SetDisplayFrequencyEvt" superclass="qpcpp::QEvt">
   <attribute name="display_frequency_hz" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  </class>
  <attribute name="AO_Arena" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Arena::instance;</code>
  </attribute>
  <attribute name="AO_Display" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Display::instance;</code>
  </attribute>
  <attribute name="AO_SerialCommandInterface" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;SerialCommandInterface::instance;</code>
  </attribute>
  <attribute name="AO_EthernetCommandInterface" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;EthernetCommandInterface::instance;</code>
  </attribute>
  <attribute name="AO_Frame" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Frame::instance;</code>
  </attribute>
  <attribute name="AO_Watchdog" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Watchdog::instance;</code>
  </attribute>
  <operation name="getRegionInstance" type="QP::QHsm *" visibility="0x00" properties="0x00">
   <parameter name="id" type="std::uint8_t"/>
   <code>//Q_REQUIRE(id &lt; Q_DIM(Region::instances));
return &amp;Region::instances[id];</code>
  </operation>
 </package>
 <directory name=".">
  <file name="ArenaController.hpp">
   <text>#ifndef ARENA_CONTROLLER_HPP
#define ARENA_CONTROLLER_HPP

#include &quot;qpcpp.hpp&quot;   // QP-C++ framework
#include &quot;bsp.hpp&quot;

namespace AC {

enum ArenaControllerSignals {

    // commands from serial or ethernet interface
    RESET_SIG = QP::Q_USER_SIG,
    ALL_ON_SIG,
    ALL_OFF_SIG,

    DEACTIVATE_DISPLAY_SIG,
    DISPLAY_FRAMES_SIG,
    TRANSFER_FRAME_SIG,
    PANEL_SET_TRANSFERRED_SIG,
    FRAME_TRANSFERRED_SIG,
    DISPLAY_FRAME_TIMEOUT_SIG,

    SERIAL_COMMAND_AVAILABLE_SIG,
    ETHERNET_COMMAND_AVAILABLE_SIG,
    COMMAND_PROCESSED_SIG,

    MAX_PUB_SIG,    // the last published signal

   // POST to SerialCommandInterface
    ACTIVATE_SERIAL_COMMAND_INTERFACE_SIG,
    DEACTIVATE_SERIAL_COMMAND_INTERFACE_SIG,
    SERIAL_READY_SIG,

    // POST to EthernetCommandInterface
    ACTIVATE_ETHERNET_COMMAND_INTERFACE_SIG,
    DEACTIVATE_ETHERNET_COMMAND_INTERFACE_SIG,
    ETHERNET_INITIALIZED_SIG,
    ETHERNET_IP_ADDRESS_FOUND_SIG,
    ETHERNET_SERVER_INITIALIZED_SIG,

    // POST to Display
    SET_DISPLAY_FREQUENCY_SIG,

    WATCHDOG_TIMEOUT_SIG, // signal for Watchdog timeout event
    SERIAL_TIMEOUT_SIG, // signal for SerialCommandInterface timeout event
    ETHERNET_TIMEOUT_SIG, // signal for EthernetCommandInterface timeout event

    MAX_SIG         // the last signal
};

} // namespace AC

namespace ArduinoInterface {

void setup();
void loop();

} // namespace ArduinoInterface

$declare${Shared}

#endif // ARENA_CONTROLLER_HPP
   </text>
  </file>
  <file name="bsp.hpp">
   <text>#ifndef BSP_HPP
#define BSP_HPP
#include &quot;Constants.hpp&quot;

class BSP {
public:
    enum { TICKS_PER_SEC = 100} ;

    static void init();

    static void ledOff();
    static void ledOn();

    static void initializeWatchdog();
    static void feedWatchdog();

    static void initializeArena();
    static void initializeDisplay();
    static void initializeFrame();

    static void activateCommandInterfaces();
    static void deactivateCommandInterfaces();

    static String processStringCommand(String command);

    static void beginSerial();
    static void pollSerialCommand();
    static uint8_t readSerialByte();
    static String readSerialStringCommand(uint8_t first_byte);
    static void writeSerialStringResponse(String response);

    static void beginEthernet();
    static void checkForEthernetIPAddress();
    static void beginEthernetServer();
    static void pollEthernetCommand();

    static void armDisplayFrameTimer(uint32_t frequency_hz);
    static void disarmDisplayFrameTimer();
    static void displayFrame();
    static void setDisplayFrequency(uint32_t frequency_hz);

    static uint8_t getRegionRowPanelCountMax();
    static uint8_t getRegionColPanelCountMax();

    static void enablePanelSetSelectPin(uint8_t row_index, uint8_t col_index);
    static void disablePanelSetSelectPin(uint8_t row_index, uint8_t col_index);
    static void transferPanelSet(const uint8_t (*panel_buffer)[], uint8_t panel_buffer_byte_count);

};

#endif // BSP_HPP</text>
  </file>
  <file name="Constants.hpp">
   <text>#ifndef ARENA_CONTROLLER_CONSTANTS_HPP
#define ARENA_CONTROLLER_CONSTANTS_HPP

#include &lt;SPI.h&gt;


namespace AC
{
namespace constants
{
// duration before callback fires
constexpr uint32_t watchdog_trigger_s = 1;
// duration before watchdog expires
constexpr uint32_t watchdog_timeout_s = 2;

constexpr uint32_t display_frequency_hz_default = 200;

constexpr byte first_command_byte_max_value_binary = 32;

// SPI Settings
constexpr uint8_t spi_bit_order = MSBFIRST;
constexpr uint8_t spi_data_mode = SPI_MODE0;

// Ethernet Settings
constexpr uint8_t mac_address_size = 6;

// Conversions
constexpr uint32_t microseconds_per_second = 1000000;

// message byte
constexpr uint8_t bit_count_per_byte = 8;

// quarter panel pixels
constexpr uint8_t pixel_count_per_quarter_panel_row = 8;
constexpr uint8_t pixel_count_per_quarter_panel_col = 8;
constexpr uint8_t pixel_count_per_quarter_panel = \
  pixel_count_per_quarter_panel_row * pixel_count_per_quarter_panel_col; // 64

// quarter panel grayscale
constexpr uint8_t bit_count_per_pixel_grayscale = 4;
constexpr uint8_t pixel_count_per_byte_grayscale = \
  bit_count_per_byte / bit_count_per_pixel_grayscale; // 2
constexpr uint8_t byte_count_per_quarter_panel_row_grayscale = \
  pixel_count_per_quarter_panel_row / pixel_count_per_byte_grayscale; // 4

// quarter panel binary
constexpr uint8_t bit_count_per_pixel_binary = 1;
constexpr uint8_t pixel_count_per_byte_binary = \
  bit_count_per_byte / bit_count_per_pixel_binary; // 8

// quarter panel message bytes
constexpr uint8_t byte_count_per_quarter_panel_control = 1;
constexpr uint8_t byte_count_per_quarter_panel_grayscale = \
  byte_count_per_quarter_panel_control + \
  pixel_count_per_quarter_panel / pixel_count_per_byte_grayscale; // 33
constexpr uint8_t byte_count_per_quarter_panel_binary = \
  byte_count_per_quarter_panel_control + \
  pixel_count_per_quarter_panel / pixel_count_per_byte_binary; // 9

// panel
constexpr uint8_t quarter_panel_count_per_panel_row = 2;
constexpr uint8_t quarter_panel_count_per_panel_col = 2;
constexpr uint8_t quarter_panel_count_per_panel = \
  quarter_panel_count_per_panel_row * quarter_panel_count_per_panel_col; // 4

// panel message bytes
constexpr uint8_t byte_count_per_panel_grayscale = \
  byte_count_per_quarter_panel_grayscale * \
  quarter_panel_count_per_panel; // 132
constexpr uint8_t byte_count_per_panel_binary = \
  byte_count_per_quarter_panel_binary * \
  quarter_panel_count_per_panel; // 36

// region
constexpr uint8_t region_count_per_frame_max = 2;

// panel pattern
constexpr uint8_t all_on_grayscale_pattern[byte_count_per_panel_grayscale] =
{
  1,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  1,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  1,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  1,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
};

constexpr uint8_t identify_quarter_panels_grayscale_pattern[byte_count_per_panel_grayscale] =
{
  1,
  15, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  1,
  15, 0, 15, 0,
  15, 0, 15, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  1,
  255, 0, 15, 0,
  15, 0, 255, 0,
  255, 0, 15, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  1,
  255, 0, 255, 0,
  255, 0, 255, 0,
  255, 0, 255, 0,
  255, 0, 255, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
};
}
}
#endif
</text>
  </file>
 </directory>
 <directory name="./ArenaController">
  <file name="Arena.cpp">
   <text>#include &quot;ArenaController.hpp&quot;  // ArenaController application interface


using namespace QP;

//============================================================================
// generate declaration of the active object
$declare${AOs::Arena}

//============================================================================
// generate definition of to opaque pointer to the AO
$define${Shared::AO_Arena}

//============================================================================
// generate definition of the AO
$define${AOs::Arena}</text>
  </file>
  <file name="ArenaController.cpp">
   <text>#include &quot;ArenaController.hpp&quot;  // ArenaController application interface

using namespace QP;

namespace ArduinoInterface {

//............................................................................
void setup() {

    QF::init(); // initialize the framework
    BSP::init(); // initialize the BSP

    // init publish-subscribe
    static QSubscrList subscrSto[AC::MAX_PUB_SIG];
    QF::psInit(subscrSto, Q_DIM(subscrSto));

   // statically allocate event queues for the AOs and start them...
    static QEvt const *watchdog_queueSto[2];
    AC::AO_Watchdog-&gt;start(1U, // priority
        watchdog_queueSto, Q_DIM(watchdog_queueSto),
        (void *)0, 0U); // no stack

    static QEvt const *serial_command_interface_queueSto[10];
    AC::AO_SerialCommandInterface-&gt;start(2U, // priority
        serial_command_interface_queueSto, Q_DIM(serial_command_interface_queueSto),
        (void *)0, 0U); // no stack

    static QEvt const *ethernet_command_interface_queueSto[10];
    AC::AO_EthernetCommandInterface-&gt;start(3U, // priority
        ethernet_command_interface_queueSto, Q_DIM(ethernet_command_interface_queueSto),
        (void *)0, 0U); // no stack

    static QEvt const *arena_queueSto[10];
    AC::AO_Arena-&gt;start(4U, // priority
        arena_queueSto, Q_DIM(arena_queueSto),
        (void *)0, 0U); // no stack

    static QEvt const *display_queueSto[10];
    AC::AO_Display-&gt;start(5U, // priority
        display_queueSto, Q_DIM(display_queueSto),
        (void *)0, 0U); // no stack

    static QEvt const *frame_queueSto[10];
    AC::AO_Frame-&gt;start(6U, // priority
        frame_queueSto, Q_DIM(frame_queueSto),
        (void *)0, 0U); // no stack

   //...
}

//............................................................................
void loop() {
    QF::run(); // run the QF/C++ framework
}

} // namespace AC</text>
  </file>
  <file name="SerialCommandInterface.cpp">
   <text>#include &quot;ArenaController.hpp&quot;  // ArenaController application interface


using namespace QP;

//============================================================================
// generate declaration of the active object
$declare${AOs::SerialCommandInterface}

//============================================================================
// generate definition of to opaque pointer to the AO
$define${Shared::AO_SerialCommandInterface}

//============================================================================
// generate definition of the AO
$define${AOs::SerialCommandInterface}</text>
  </file>
  <file name="Display.cpp">
   <text>#include &quot;ArenaController.hpp&quot;  // ArenaController application interface


using namespace QP;

//============================================================================
// generate declaration of the active object
$declare${AOs::Display}

//============================================================================
// generate definition of to opaque pointer to the AO
$define${Shared::AO_Display}

//============================================================================
// generate definition of the AO
$define${AOs::Display}</text>
  </file>
  <file name="EthernetCommandInterface.cpp">
   <text>#include &quot;ArenaController.hpp&quot;  // ArenaController application interface


using namespace QP;

//============================================================================
// generate declaration of the active object
$declare${AOs::EthernetCommandInterface}

//============================================================================
// generate definition of to opaque pointer to the AO
$define${Shared::AO_EthernetCommandInterface}

//============================================================================
// generate definition of the AO
$define${AOs::EthernetCommandInterface}</text>
  </file>
  <file name="Frame.cpp">
   <text>#include &quot;ArenaController.hpp&quot;  // ArenaController application interface


using namespace QP;

//============================================================================
// generate declaration of the active object
$declare${AOs::Frame}

//============================================================================
// generate definition of to opaque pointer to the AO
$define${Shared::AO_Frame}

//============================================================================
// generate definition of the AO
$define${AOs::Frame}</text>
  </file>
  <file name="Watchdog.cpp">
   <text>#include &quot;ArenaController.hpp&quot;  // ArenaController application interface


using namespace QP;

//============================================================================
// generate declaration of the active object
$declare${AOs::Watchdog}

//============================================================================
// generate definition of to opaque pointer to the AO
$define${Shared::AO_Watchdog}

//============================================================================
// generate definition of the AO
$define${AOs::Watchdog}</text>
  </file>
  <file name="Region.cpp">
   <text>#include &quot;ArenaController.hpp&quot;  // ArenaController application interface


using namespace QP;

//============================================================================
// generate declaration of the active object
$declare${AOs::Region}

// helper function to provide the ID of this mine ............................
static inline uint8_t REGION_ID(AC::Region const * const me) {
    return static_cast&lt;uint8_t&gt;(me - &amp;AC::Region::instances[0]);
}

//============================================================================
$define${Shared::getRegionInstance}

//============================================================================
// generate definition of the AO
$define${AOs::Region}</text>
  </file>
 </directory>
</model>
