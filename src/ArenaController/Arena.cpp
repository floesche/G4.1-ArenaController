//.$file${./ArenaControlle~::Arena.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${./ArenaControlle~::Arena.cpp}
//
// This code has been generated by QM 5.1.3 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${./ArenaControlle~::Arena.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "ArenaController.hpp"  // ArenaController application interface

using namespace QP;

//============================================================================
// generate declaration of the active object
//.$declare${AOs::Arena} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${AOs::Arena} .............................................................
class Arena : public QP::QActive {
public:
    static Arena instance;

public:
    Arena();

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(ArenaOn);
    Q_STATE_DECL(DisplayOn);
    Q_STATE_DECL(AllOn);
    Q_STATE_DECL(AllOnWaiting);
    Q_STATE_DECL(AllOnDisplaying);
    Q_STATE_DECL(DisplayOff);
};

} // namespace AC
//.$enddecl${AOs::Arena} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of to opaque pointer to the AO
//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${AOs::AO_Arena} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${AOs::AO_Arena} ..........................................................
QP::QActive * const AO_Arena = &Arena::instance;

} // namespace AC
//.$enddef${AOs::AO_Arena} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of the AO
//.$define${AOs::Arena} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${AOs::Arena} .............................................................
Arena Arena::instance;
//.${AOs::Arena::Arena} ......................................................
Arena::Arena()
: QActive(Q_STATE_CAST(&Arena::initial))
{}

//.${AOs::Arena::SM} .........................................................
Q_STATE_DEF(Arena, initial) {
    //.${AOs::Arena::SM::initial}
    (void)e; // suppress the compiler warning about unused parameter

    //QS_OBJ_DICTIONARY(&ArenaController::instance);

    //QS_SIG_DICTIONARY(RESET_SIG, nullptr); // global signals
    //QS_SIG_DICTIONARY(ALL_ON_SIG, nullptr);
    //QS_SIG_DICTIONARY(ALL_OFF_SIG, nullptr);

    //subscribe(RESET_SIG);
    subscribe(ALL_ON_SIG);
    subscribe(ALL_OFF_SIG);
    subscribe(DISPLAY_FRAME_TIMEOUT_SIG);
    return tran(&DisplayOff);
}
//.${AOs::Arena::SM::ArenaOn} ................................................
Q_STATE_DEF(Arena, ArenaOn) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Arena::SM::ArenaOn}
        case Q_ENTRY_SIG: {
            static QEvt const activateSerialCommandInterfaceEvt = { AC::ACTIVATE_SERIAL_COMMAND_INTERFACE_SIG, 0U, 0U};
            QF::PUBLISH(&activateSerialCommandInterfaceEvt, this);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Arena::SM::ArenaOn}
        case Q_EXIT_SIG: {
            static QEvt const deactivateSerialCommandInterfaceEvt = { AC::DEACTIVATE_SERIAL_COMMAND_INTERFACE_SIG, 0U, 0U};
            QF::PUBLISH(&deactivateSerialCommandInterfaceEvt, this);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Arena::SM::ArenaOn::RESET}
        case RESET_SIG: {
            status_ = tran(&ArenaOn);
            break;
        }
        //.${AOs::Arena::SM::ArenaOn::ALL_OFF}
        case ALL_OFF_SIG: {
            status_ = tran(&DisplayOff);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${AOs::Arena::SM::ArenaOn::DisplayOn} .....................................
Q_STATE_DEF(Arena, DisplayOn) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Arena::SM::ArenaOn::DisplayOn}
        case Q_ENTRY_SIG: {
            BSP::armDisplayFrameTimer(400);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Arena::SM::ArenaOn::DisplayOn}
        case Q_EXIT_SIG: {
            BSP::disarmDisplayFrameTimer();
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&ArenaOn);
            break;
        }
    }
    return status_;
}
//.${AOs::Arena::SM::ArenaOn::DisplayOn::AllOn} ..............................
Q_STATE_DEF(Arena, AllOn) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Arena::SM::ArenaOn::DisplayOn::AllOn::initial}
        case Q_INIT_SIG: {
            status_ = tran(&AllOnWaiting);
            break;
        }
        default: {
            status_ = super(&DisplayOn);
            break;
        }
    }
    return status_;
}
//.${AOs::Arena::SM::ArenaOn::DisplayOn::AllOn::AllOnWaiting} ................
Q_STATE_DEF(Arena, AllOnWaiting) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Arena::SM::ArenaOn::DisplayOn::AllOn::AllOnWaiting}
        case Q_ENTRY_SIG: {
            BSP::ledOff();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Arena::SM::ArenaOn::DisplayOn::AllOn::AllOnWaiting::DISPLAY_FRAME_TIMEOUT}
        case DISPLAY_FRAME_TIMEOUT_SIG: {
            status_ = tran(&AllOnDisplaying);
            break;
        }
        default: {
            status_ = super(&AllOn);
            break;
        }
    }
    return status_;
}
//.${AOs::Arena::SM::ArenaOn::DisplayOn::AllOn::AllOnDisplaying} .............
Q_STATE_DEF(Arena, AllOnDisplaying) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Arena::SM::ArenaOn::DisplayOn::AllOn::AllOnDisplaying}
        case Q_ENTRY_SIG: {
            BSP::ledOn();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Arena::SM::ArenaOn::DisplayOn::AllOn::AllOnDisplaying::DISPLAY_FRAME_TIMEOUT}
        case DISPLAY_FRAME_TIMEOUT_SIG: {
            status_ = tran(&AllOnWaiting);
            break;
        }
        default: {
            status_ = super(&AllOn);
            break;
        }
    }
    return status_;
}
//.${AOs::Arena::SM::ArenaOn::DisplayOff} ....................................
Q_STATE_DEF(Arena, DisplayOff) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Arena::SM::ArenaOn::DisplayOff}
        case Q_ENTRY_SIG: {
            BSP::ledOff();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Arena::SM::ArenaOn::DisplayOff::ALL_ON}
        case ALL_ON_SIG: {
            status_ = tran(&AllOn);
            break;
        }
        default: {
            status_ = super(&ArenaOn);
            break;
        }
    }
    return status_;
}

} // namespace AC
//.$enddef${AOs::Arena} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


