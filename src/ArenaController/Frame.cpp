//.$file${./ArenaControlle~::Frame.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${./ArenaControlle~::Frame.cpp}
//
// This code has been generated by QM 5.1.3 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${./ArenaControlle~::Frame.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "Frame.hpp"


using namespace QP;

//============================================================================
// generate definition of to opaque pointer to the AO
//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${Shared::AO_Frame} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${Shared::AO_Frame} .......................................................
QP::QActive * const AO_Frame = &Frame::instance;

} // namespace AC
//.$enddef${Shared::AO_Frame} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of the AO
//.$define${AOs::Frame} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${AOs::Frame} .............................................................
Frame Frame::instance;
//.${AOs::Frame::Frame} ......................................................
Frame::Frame()
: QActive(Q_STATE_CAST(&Frame::initial))
{}

//.${AOs::Frame::SM} .........................................................
Q_STATE_DEF(Frame, initial) {
    //.${AOs::Frame::SM::initial}
    FSP::Frame_initializeAndSubscribe(this, e);

    QS_FUN_DICTIONARY(&Frame::Inactive);
    QS_FUN_DICTIONARY(&Frame::Active);
    QS_FUN_DICTIONARY(&Frame::TransferringFrame);
    QS_FUN_DICTIONARY(&Frame::TransferringPanelSet);

    return tran(&Inactive);
}
//.${AOs::Frame::SM::Inactive} ...............................................
Q_STATE_DEF(Frame, Inactive) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Frame::SM::Inactive::TRANSFER_FRAME}
        case TRANSFER_FRAME_SIG: {
            status_ = tran(&TransferringFrame);
            break;
        }
        //.${AOs::Frame::SM::Inactive::FILL_FRAME_BUFFER_WITH_ALL_ON}
        case FILL_FRAME_BUFFER_WITH_ALL_ON_SIG: {
            FSP::Frame_fillFrameBufferWithAllOn(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Frame::SM::Inactive::FILL_FRAME_BUFFER_WITH_STREAM}
        case FILL_FRAME_BUFFER_WITH_STREAM_SIG: {
            FSP::Frame_fillFrameBufferWithStream(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${AOs::Frame::SM::Active} .................................................
Q_STATE_DEF(Frame, Active) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Frame::SM::Active}
        case Q_ENTRY_SIG: {
            FSP::Frame_reset(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${AOs::Frame::SM::Active::TransferringFrame} ..............................
Q_STATE_DEF(Frame, TransferringFrame) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Frame::SM::Active::TransferringFram~::initial}
        case Q_INIT_SIG: {
            status_ = tran(&TransferringPanelSet);
            break;
        }
        //.${AOs::Frame::SM::Active::TransferringFram~::FRAME_TRANSFERRED}
        case FRAME_TRANSFERRED_SIG: {
            status_ = tran(&Inactive);
            break;
        }
        default: {
            status_ = super(&Active);
            break;
        }
    }
    return status_;
}
//.${AOs::Frame::SM::Active::TransferringFram~::TransferringPanelSet} ........
Q_STATE_DEF(Frame, TransferringPanelSet) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Frame::SM::Active::TransferringFram~::TransferringPanelSet}
        case Q_ENTRY_SIG: {
            FSP::Frame_beginTransferPanelSet(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Frame::SM::Active::TransferringFram~::TransferringPanelSet}
        case Q_EXIT_SIG: {
            FSP::Frame_endTransferPanelSet(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Frame::SM::Active::TransferringFram~::TransferringPane~::PANEL_SET_TRANSFERRED}
        case PANEL_SET_TRANSFERRED_SIG: {
            //.${AOs::Frame::SM::Active::TransferringFram~::TransferringPane~::PANEL_SET_TRANSF~::[ifFrameNotTransferred()]}
            if (FSP::Frame_ifFrameNotTransferred(this, e)) {
                status_ = tran(&TransferringPanelSet);
            }
            //.${AOs::Frame::SM::Active::TransferringFram~::TransferringPane~::PANEL_SET_TRANSF~::[else]}
            else {
                FSP::Frame_publishFrameTransferred(this, e);
                status_ = Q_RET_HANDLED;
            }
            break;
        }
        default: {
            status_ = super(&TransferringFrame);
            break;
        }
    }
    return status_;
}

} // namespace AC
//.$enddef${AOs::Frame} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
