//.$file${./ArenaControlle~::EthernetCommandInterface.cpp} vvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${./ArenaControlle~::EthernetCommandInterface.cpp}
//
// This code has been generated by QM 5.1.3 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${./ArenaControlle~::EthernetCommandInterface.cpp} ^^^^^^^^^^^^^^^^
#include "ArenaController.hpp"  // ArenaController application interface


using namespace QP;

//============================================================================
// generate declaration of the active object
//.$declare${AOs::EthernetCommandInterface} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${AOs::EthernetCommandInterface} ..........................................
class EthernetCommandInterface : public QP::QActive {
public:
    static EthernetCommandInterface instance;
    QP::QTimeEvt ethernet_time_evt_;

public:
    EthernetCommandInterface();

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(Inactive);
    Q_STATE_DECL(Active);
    Q_STATE_DECL(Unintitalized);
    Q_STATE_DECL(Initialized);
    Q_STATE_DECL(ServerRunning);
    Q_STATE_DECL(WaitingForClient);
    Q_STATE_DECL(ClientConnected);
};

} // namespace AC
//.$enddecl${AOs::EthernetCommandInterface} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of to opaque pointer to the AO
//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${Shared::AO_EthernetCommandInterface} vvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${Shared::AO_EthernetCommandInterface} ....................................
QP::QActive * const AO_EthernetCommandInterface = &EthernetCommandInterface::instance;

} // namespace AC
//.$enddef${Shared::AO_EthernetCommandInterface} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of the AO
//.$define${AOs::EthernetCommandInterface} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${AOs::EthernetCommandInterface} ..........................................
EthernetCommandInterface EthernetCommandInterface::instance;
//.${AOs::EthernetCommandI~::EthernetCommandInterface} .......................
EthernetCommandInterface::EthernetCommandInterface()
: QActive(Q_STATE_CAST(&EthernetCommandInterface::initial)),
    ethernet_time_evt_(this, ETHERNET_TIMEOUT_SIG, 0U)
{}

//.${AOs::EthernetCommandI~::SM} .............................................
Q_STATE_DEF(EthernetCommandInterface, initial) {
    //.${AOs::EthernetCommandI~::SM::initial}
    subscribe(ACTIVATE_ETHERNET_COMMAND_INTERFACE_SIG);
    subscribe(DEACTIVATE_ETHERNET_COMMAND_INTERFACE_SIG);
    subscribe(ETHERNET_INITIALIZED_SIG);
    subscribe(ETHERNET_SERVER_INITIALIZED_SIG);
    subscribe(ETHERNET_CLIENT_CONNECTED_SIG);
    return tran(&Inactive);
}
//.${AOs::EthernetCommandI~::SM::Inactive} ...................................
Q_STATE_DEF(EthernetCommandInterface, Inactive) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::EthernetCommandI~::SM::Inactive::ACTIVATE_ETHERNET_COMMAND_INTERF~}
        case ACTIVATE_ETHERNET_COMMAND_INTERFACE_SIG: {
            status_ = tran(&Active);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${AOs::EthernetCommandI~::SM::Active} .....................................
Q_STATE_DEF(EthernetCommandInterface, Active) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::EthernetCommandI~::SM::Active::initial}
        case Q_INIT_SIG: {
            status_ = tran(&Unintitalized);
            break;
        }
        //.${AOs::EthernetCommandI~::SM::Active::DEACTIVATE_ETHERNET_COMMAND_INTE~}
        case DEACTIVATE_ETHERNET_COMMAND_INTERFACE_SIG: {
            status_ = tran(&Inactive);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${AOs::EthernetCommandI~::SM::Active::Unintitalized} ......................
Q_STATE_DEF(EthernetCommandInterface, Unintitalized) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::EthernetCommandI~::SM::Active::Unintitalized}
        case Q_ENTRY_SIG: {
            BSP::beginEthernet();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::EthernetCommandI~::SM::Active::Unintitalized::ETHERNET_INITIALIZED}
        case ETHERNET_INITIALIZED_SIG: {
            status_ = tran(&Initialized);
            break;
        }
        default: {
            status_ = super(&Active);
            break;
        }
    }
    return status_;
}
//.${AOs::EthernetCommandI~::SM::Active::Initialized} ........................
Q_STATE_DEF(EthernetCommandInterface, Initialized) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::EthernetCommandI~::SM::Active::Initialized}
        case Q_ENTRY_SIG: {
            BSP::beginEthernetServer();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::EthernetCommandI~::SM::Active::Initialized::ETHERNET_SERVER_INITIALIZED}
        case ETHERNET_SERVER_INITIALIZED_SIG: {
            status_ = tran(&ServerRunning);
            break;
        }
        default: {
            status_ = super(&Active);
            break;
        }
    }
    return status_;
}
//.${AOs::EthernetCommandI~::SM::Active::ServerRunning} ......................
Q_STATE_DEF(EthernetCommandInterface, ServerRunning) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::EthernetCommandI~::SM::Active::ServerRunning}
        case Q_ENTRY_SIG: {
            ethernet_time_evt_.armX(BSP::TICKS_PER_SEC/1, BSP::TICKS_PER_SEC/1);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::EthernetCommandI~::SM::Active::ServerRunning}
        case Q_EXIT_SIG: {
            ethernet_time_evt_.disarm();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::EthernetCommandI~::SM::Active::ServerRunning::initial}
        case Q_INIT_SIG: {
            status_ = tran(&WaitingForClient);
            break;
        }
        default: {
            status_ = super(&Active);
            break;
        }
    }
    return status_;
}
//.${AOs::EthernetCommandI~::SM::Active::ServerRunning::WaitingForClient} ....
Q_STATE_DEF(EthernetCommandInterface, WaitingForClient) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::EthernetCommandI~::SM::Active::ServerRunning::WaitingForClient::ETHERNET_TIMEOUT}
        case ETHERNET_TIMEOUT_SIG: {
            BSP::checkForEthernetClient();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::EthernetCommandI~::SM::Active::ServerRunning::WaitingForClient::ETHERNET_CLIENT_CONNECTED}
        case ETHERNET_CLIENT_CONNECTED_SIG: {
            status_ = tran(&ClientConnected);
            break;
        }
        default: {
            status_ = super(&ServerRunning);
            break;
        }
    }
    return status_;
}
//.${AOs::EthernetCommandI~::SM::Active::ServerRunning::ClientConnected} .....
Q_STATE_DEF(EthernetCommandInterface, ClientConnected) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::EthernetCommandI~::SM::Active::ServerRunning::ClientConnected::ETHERNET_TIMEOUT}
        case ETHERNET_TIMEOUT_SIG: {
            BSP::pollEthernetCommand();
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&ServerRunning);
            break;
        }
    }
    return status_;
}

} // namespace AC
//.$enddef${AOs::EthernetCommandInterface} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
