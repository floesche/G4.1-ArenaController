//.$file${./ArenaControlle~::Pattern.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${./ArenaControlle~::Pattern.cpp}
//
// This code has been generated by QM 5.1.3 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${./ArenaControlle~::Pattern.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "Pattern.hpp"


using namespace QP;

//============================================================================
// generate definition of to opaque pointer to the AO
//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${Shared::AO_Pattern} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${Shared::AO_Pattern} .....................................................
QP::QActive * const AO_Pattern = &Pattern::instance;

} // namespace AC
//.$enddef${Shared::AO_Pattern} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of the AO
//.$define${AOs::Pattern} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${AOs::Pattern} ...........................................................
Pattern Pattern::instance;
//.${AOs::Pattern::Pattern} ..................................................
Pattern::Pattern()
: QActive(Q_STATE_CAST(&Pattern::initial)),
    frame_rate_time_evt_(this, FRAME_RATE_TIMEOUT_SIG, 0U),
    runtime_duration_time_evt_(this, RUNTIME_DURATION_TIMEOUT_SIG, 0U)
{}

//.${AOs::Pattern::SM} .......................................................
Q_STATE_DEF(Pattern, initial) {
    //.${AOs::Pattern::SM::initial}
    FSP::Pattern_initializeAndSubscribe(this, e);

    QS_FUN_DICTIONARY(&Pattern::Initialized);
    QS_FUN_DICTIONARY(&Pattern::Inactive);
    QS_FUN_DICTIONARY(&Pattern::PatternFileOpened);
    QS_FUN_DICTIONARY(&Pattern::PatternFileValid);

    return tran(&Initialized);
}
//.${AOs::Pattern::SM::Initialized} ..........................................
Q_STATE_DEF(Pattern, Initialized) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Pattern::SM::Initialized::initial}
        case Q_INIT_SIG: {
            status_ = tran(&Inactive);
            break;
        }
        //.${AOs::Pattern::SM::Initialized::DISPLAY_PATTERN}
        case DISPLAY_PATTERN_SIG: {
            FSP::Pattern_storeParameters(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${AOs::Pattern::SM::Initialized::Inactive} ................................
Q_STATE_DEF(Pattern, Inactive) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Pattern::SM::Initialized::Inactive::BEGIN_DISPLAYING_PATTERN}
        case BEGIN_DISPLAYING_PATTERN_SIG: {
            //.${AOs::Pattern::SM::Initialized::Inactive::BEGIN_DISPLAYING~::[ifCardFound()]}
            if (FSP::Pattern_ifCardFound(this, e)) {
                status_ = tran(&PatternFileOpened);
            }
            //.${AOs::Pattern::SM::Initialized::Inactive::BEGIN_DISPLAYING~::[else]}
            else {
                FSP::Pattern_postAllOff(this, e);
                status_ = tran(&Inactive);
            }
            break;
        }
        default: {
            status_ = super(&Initialized);
            break;
        }
    }
    return status_;
}
//.${AOs::Pattern::SM::Initialized::PatternFileOpened} .......................
Q_STATE_DEF(Pattern, PatternFileOpened) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Pattern::SM::Initialized::PatternFileOpened}
        case Q_ENTRY_SIG: {
            FSP::Pattern_openPatternFile(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Pattern::SM::Initialized::PatternFileOpened}
        case Q_EXIT_SIG: {
            FSP::Pattern_closePatternFile(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Pattern::SM::Initialized::PatternFileOpene~::initial}
        case Q_INIT_SIG: {
            status_ = tran(&PatternFileValid);
            break;
        }
        //.${AOs::Pattern::SM::Initialized::PatternFileOpene~::END_DISPLAYING_PATTERN}
        case END_DISPLAYING_PATTERN_SIG: {
            status_ = tran(&Inactive);
            break;
        }
        default: {
            status_ = super(&Initialized);
            break;
        }
    }
    return status_;
}
//.${AOs::Pattern::SM::Initialized::PatternFileOpene~::PatternFileValid} .....
Q_STATE_DEF(Pattern, PatternFileValid) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Pattern::SM::Initialized::PatternFileOpene~::PatternFileValid}
        case Q_ENTRY_SIG: {
            FSP::Pattern_checkPatternFile(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&PatternFileOpened);
            break;
        }
    }
    return status_;
}

} // namespace AC
//.$enddef${AOs::Pattern} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
