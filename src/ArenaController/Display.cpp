//.$file${./ArenaControlle~::Display.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${./ArenaControlle~::Display.cpp}
//
// This code has been generated by QM 5.1.3 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${./ArenaControlle~::Display.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "Display.hpp"


using namespace QP;

//============================================================================
// generate definition of to opaque pointer to the AO
//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${Shared::AO_Display} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${Shared::AO_Display} .....................................................
QP::QActive * const AO_Display = &Display::instance;

} // namespace AC
//.$enddef${Shared::AO_Display} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of the AO
//.$define${AOs::Display} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${AOs::Display} ...........................................................
Display Display::instance;
//.${AOs::Display::Display} ..................................................
Display::Display()
: QActive(Q_STATE_CAST(&Display::initial))
{}

//.${AOs::Display::SM} .......................................................
Q_STATE_DEF(Display, initial) {
    //.${AOs::Display::SM::initial}
    FSP::Display_initializeAndSubscribe(this, e);

    QS_FUN_DICTIONARY(&Display::Initialized);
    QS_FUN_DICTIONARY(&Display::Inactive);
    QS_FUN_DICTIONARY(&Display::Active);
    QS_FUN_DICTIONARY(&Display::DisplayingFrames);
    QS_FUN_DICTIONARY(&Display::WaitingToTransferFrame);
    QS_FUN_DICTIONARY(&Display::TransferringFrame);

    return tran(&Initialized);
}
//.${AOs::Display::SM::Initialized} ..........................................
Q_STATE_DEF(Display, Initialized) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Display::SM::Initialized::initial}
        case Q_INIT_SIG: {
            status_ = tran(&Inactive);
            break;
        }
        //.${AOs::Display::SM::Initialized::SET_REFRESH_RATE}
        case SET_REFRESH_RATE_SIG: {
            FSP::Display_setRefreshRate(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${AOs::Display::SM::Initialized::Inactive} ................................
Q_STATE_DEF(Display, Inactive) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Display::SM::Initialized::Inactive::DISPLAY_FRAMES}
        case DISPLAY_FRAMES_SIG: {
            status_ = tran(&DisplayingFrames);
            break;
        }
        default: {
            status_ = super(&Initialized);
            break;
        }
    }
    return status_;
}
//.${AOs::Display::SM::Initialized::Active} ..................................
Q_STATE_DEF(Display, Active) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Display::SM::Initialized::Active::DEACTIVATE_DISPLAY}
        case DEACTIVATE_DISPLAY_SIG: {
            status_ = tran(&Inactive);
            break;
        }
        default: {
            status_ = super(&Initialized);
            break;
        }
    }
    return status_;
}
//.${AOs::Display::SM::Initialized::Active::DisplayingFrames} ................
Q_STATE_DEF(Display, DisplayingFrames) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Display::SM::Initialized::Active::DisplayingFrames}
        case Q_ENTRY_SIG: {
            FSP::Display_armRefreshTimer(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Display::SM::Initialized::Active::DisplayingFrames}
        case Q_EXIT_SIG: {
            FSP::Display_disarmRefreshTimer(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Display::SM::Initialized::Active::DisplayingFrames::initial}
        case Q_INIT_SIG: {
            status_ = tran(&WaitingToTransferFrame);
            break;
        }
        //.${AOs::Display::SM::Initialized::Active::DisplayingFrames::SET_REFRESH_RATE}
        case SET_REFRESH_RATE_SIG: {
            FSP::Display_setRefreshRate(this, e);
            status_ = tran(&DisplayingFrames);
            break;
        }
        default: {
            status_ = super(&Active);
            break;
        }
    }
    return status_;
}
//.${AOs::Display::SM::Initialized::Active::DisplayingFrames::WaitingToTransferFrame} 
Q_STATE_DEF(Display, WaitingToTransferFrame) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Display::SM::Initialized::Active::DisplayingFrames::WaitingToTransferFrame}
        case Q_ENTRY_SIG: {
            FSP::Display_recall(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Display::SM::Initialized::Active::DisplayingFrames::WaitingToTransfe~::REFRESH_TIMEOUT}
        case REFRESH_TIMEOUT_SIG: {
            status_ = tran(&TransferringFrame);
            break;
        }
        default: {
            status_ = super(&DisplayingFrames);
            break;
        }
    }
    return status_;
}
//.${AOs::Display::SM::Initialized::Active::DisplayingFrames::TransferringFrame} 
Q_STATE_DEF(Display, TransferringFrame) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Display::SM::Initialized::Active::DisplayingFrames::TransferringFrame}
        case Q_ENTRY_SIG: {
            FSP::Display_transferFrame(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Display::SM::Initialized::Active::DisplayingFrames::TransferringFram~::FRAME_TRANSFERRED}
        case FRAME_TRANSFERRED_SIG: {
            status_ = tran(&WaitingToTransferFrame);
            break;
        }
        //.${AOs::Display::SM::Initialized::Active::DisplayingFrames::TransferringFram~::REFRESH_TIMEOUT}
        case REFRESH_TIMEOUT_SIG: {
            FSP::Display_defer(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&DisplayingFrames);
            break;
        }
    }
    return status_;
}

} // namespace AC
//.$enddef${AOs::Display} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
