//.$file${./ArenaControlle~::Display.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${./ArenaControlle~::Display.cpp}
//
// This code has been generated by QM 5.1.3 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${./ArenaControlle~::Display.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "ArenaController.hpp"  // ArenaController application interface


using namespace QP;

//============================================================================
// generate declaration of the active object
//.$declare${AOs::Display} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${AOs::Display} ...........................................................
class Display : public QP::QActive {
public:
    static Display instance;

private:
    std::uint8_t const (*panel_buffer_)[];

public:
    Display();

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(Inactive);
    Q_STATE_DECL(Active);
    Q_STATE_DECL(DisplayingUniformGrayscaleFrames);
    Q_STATE_DECL(WaitingToDisplayFrame);
    Q_STATE_DECL(DisplayingFrame);
};

} // namespace AC
//.$enddecl${AOs::Display} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of to opaque pointer to the AO
//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${Shared::AO_Display} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${Shared::AO_Display} .....................................................
QP::QActive * const AO_Display = &Display::instance;

} // namespace AC
//.$enddef${Shared::AO_Display} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of the AO
//.$define${AOs::Display} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//.${AOs::Display} ...........................................................
Display Display::instance;
//.${AOs::Display::Display} ..................................................
Display::Display()
: QActive(Q_STATE_CAST(&Display::initial))
{}

//.${AOs::Display::SM} .......................................................
Q_STATE_DEF(Display, initial) {
    //.${AOs::Display::SM::initial}
    subscribe(DEACTIVATE_DISPLAY_SIG);
    subscribe(DISPLAY_UNIFORM_GRAYSCALE_FRAMES_SIG);
    subscribe(DISPLAY_FRAME_TIMEOUT_SIG);
    subscribe(FRAME_TRANSFERRED_SIG);
    return tran(&Inactive);
}
//.${AOs::Display::SM::Inactive} .............................................
Q_STATE_DEF(Display, Inactive) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Display::SM::Inactive::DISPLAY_UNIFORM_GRAYSCALE_FRAMES}
        case DISPLAY_UNIFORM_GRAYSCALE_FRAMES_SIG: {
            panel_buffer_ = Q_EVT_CAST(DisplayUniformGrayscaleFramesEvt)->panel_buffer;
            status_ = tran(&DisplayingUniformGrayscaleFrames);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${AOs::Display::SM::Active} ...............................................
Q_STATE_DEF(Display, Active) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Display::SM::Active::DEACTIVATE_DISPLAY}
        case DEACTIVATE_DISPLAY_SIG: {
            status_ = tran(&Inactive);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${AOs::Display::SM::Active::DisplayingUniformGrayscaleFrames} .............
Q_STATE_DEF(Display, DisplayingUniformGrayscaleFrames) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Display::SM::Active::DisplayingUniformGrayscaleFrames}
        case Q_ENTRY_SIG: {
            BSP::armDisplayFrameTimer(200);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Display::SM::Active::DisplayingUniformGrayscaleFrames}
        case Q_EXIT_SIG: {
            BSP::disarmDisplayFrameTimer();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Display::SM::Active::DisplayingUnifor~::initial}
        case Q_INIT_SIG: {
            status_ = tran(&WaitingToDisplayFrame);
            break;
        }
        default: {
            status_ = super(&Active);
            break;
        }
    }
    return status_;
}
//.${AOs::Display::SM::Active::DisplayingUnifor~::WaitingToDisplayFrame} .....
Q_STATE_DEF(Display, WaitingToDisplayFrame) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Display::SM::Active::DisplayingUnifor~::WaitingToDisplay~::DISPLAY_FRAME_TIMEOUT}
        case DISPLAY_FRAME_TIMEOUT_SIG: {
            status_ = tran(&DisplayingFrame);
            break;
        }
        default: {
            status_ = super(&DisplayingUniformGrayscaleFrames);
            break;
        }
    }
    return status_;
}
//.${AOs::Display::SM::Active::DisplayingUnifor~::DisplayingFrame} ...........
Q_STATE_DEF(Display, DisplayingFrame) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Display::SM::Active::DisplayingUnifor~::DisplayingFrame}
        case Q_ENTRY_SIG: {
            static AC::TransferUniformGrayscaleFrameEvt transferUniformGrayscaleFrameEvt = { AC::TRANSFER_UNIFORM_GRAYSCALE_FRAME_SIG, 0U, 0U};
            transferUniformGrayscaleFrameEvt.panel_buffer = panel_buffer_;
            QF::PUBLISH(&transferUniformGrayscaleFrameEvt, this);
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Display::SM::Active::DisplayingUnifor~::DisplayingFrame::FRAME_TRANSFERRED}
        case FRAME_TRANSFERRED_SIG: {
            status_ = tran(&WaitingToDisplayFrame);
            break;
        }
        default: {
            status_ = super(&DisplayingUniformGrayscaleFrames);
            break;
        }
    }
    return status_;
}

} // namespace AC
//.$enddef${AOs::Display} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
